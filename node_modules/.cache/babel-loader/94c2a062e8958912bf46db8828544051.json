{"ast":null,"code":"var _jsxFileName = \"D:\\\\fe3-final-main\\\\src\\\\Routes\\\\Favs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from '../Components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Favs = () => {\n  _s();\n  const [favorites, setFavorites] = useState([]);\n  const [dentists, setDentists] = useState([]);\n  useEffect(() => {\n    // Recupera los dentistas destacados del localStorage\n    const storedFavorites = localStorage.getItem('favorites');\n    if (storedFavorites) {\n      try {\n        // Intenta parsear los datos del Local Storage a un arreglo\n        const parsedFavorites = JSON.parse(storedFavorites);\n        setFavorites(parsedFavorites);\n      } catch (error) {\n        console.error('Error al parsear los favoritos del localStorage:', error);\n      }\n    } else {\n      // Si no hay datos en el Local Storage, establece favorites como un arreglo vacío\n      setFavorites([]);\n    }\n\n    // Recupera todos los dentistas (puedes obtenerlos de tu fuente de datos)\n    // Por ahora, usaremos un array vacío ya que los datos provienen de la página de inicio\n    const exampleDentists = [];\n    setDentists(exampleDentists);\n  }, []);\n\n  // Filtra los dentistas favoritos y muestra solo esos\n  const favoriteDentists = dentists.filter(dentist => favorites.includes(dentist.id));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dentists Favs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), favorites.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tienes dentistas destacados.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: favoriteDentists.map(dentist => /*#__PURE__*/_jsxDEV(Card, {\n        dentist: dentist\n      }, dentist.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Favs, \"3LQvGSYOBafSPWdUskDvT58nvRI=\");\n_c = Favs;\nexport default Favs;\nvar _c;\n$RefreshReg$(_c, \"Favs\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Favs","_s","favorites","setFavorites","dentists","setDentists","storedFavorites","localStorage","getItem","parsedFavorites","JSON","parse","error","console","exampleDentists","favoriteDentists","filter","dentist","includes","id","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","_c","$RefreshReg$"],"sources":["D:/fe3-final-main/src/Routes/Favs.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from '../Components/Card';\n\nconst Favs = () => {\n  const [favorites, setFavorites] = useState([]);\n  const [dentists, setDentists] = useState([]);\n\n  useEffect(() => {\n    // Recupera los dentistas destacados del localStorage\n    const storedFavorites = localStorage.getItem('favorites');\n    if (storedFavorites) {\n      try {\n        // Intenta parsear los datos del Local Storage a un arreglo\n        const parsedFavorites = JSON.parse(storedFavorites);\n        setFavorites(parsedFavorites);\n      } catch (error) {\n        console.error('Error al parsear los favoritos del localStorage:', error);\n      }\n    } else {\n      // Si no hay datos en el Local Storage, establece favorites como un arreglo vacío\n      setFavorites([]);\n    }\n  \n    // Recupera todos los dentistas (puedes obtenerlos de tu fuente de datos)\n    // Por ahora, usaremos un array vacío ya que los datos provienen de la página de inicio\n    const exampleDentists = [];\n    setDentists(exampleDentists);\n  }, []);\n  \n  // Filtra los dentistas favoritos y muestra solo esos\n  const favoriteDentists = dentists.filter((dentist) => favorites.includes(dentist.id));\n\n  return (\n    <>\n      <h1>Dentists Favs</h1>\n      {favorites.length === 0 ? (\n        <p>No tienes dentistas destacados.</p>\n      ) : (\n        <div className=\"card-grid\">\n          {favoriteDentists.map((dentist) => (\n            <Card\n              key={dentist.id}\n              dentist={dentist}\n            />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Favs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACzD,IAAIF,eAAe,EAAE;MACnB,IAAI;QACF;QACA,MAAMG,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;QACnDH,YAAY,CAACM,eAAe,CAAC;MAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MAC1E;IACF,CAAC,MAAM;MACL;MACAT,YAAY,CAAC,EAAE,CAAC;IAClB;;IAEA;IACA;IACA,MAAMW,eAAe,GAAG,EAAE;IAC1BT,WAAW,CAACS,eAAe,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAGX,QAAQ,CAACY,MAAM,CAAEC,OAAO,IAAKf,SAAS,CAACgB,QAAQ,CAACD,OAAO,CAACE,EAAE,CAAC,CAAC;EAErF,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBtB,SAAS,CAACuB,MAAM,KAAK,CAAC,gBACrB5B,OAAA;MAAAuB,QAAA,EAAG;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEtC3B,OAAA;MAAK6B,SAAS,EAAC,WAAW;MAAAN,QAAA,EACvBL,gBAAgB,CAACY,GAAG,CAAEV,OAAO,iBAC5BpB,OAAA,CAACF,IAAI;QAEHsB,OAAO,EAAEA;MAAQ,GADZA,OAAO,CAACE,EAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA,eACD,CAAC;AAEP,CAAC;AAACvB,EAAA,CA9CID,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAgDV,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}